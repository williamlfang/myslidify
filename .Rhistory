}
## 如果新股的数据没有获取,则需要自动补全
if (dt[!is.na(StockName), length(unique(StockName))] == 1) {
dt[, ":="(
ExchID = dt[!is.na(StockName), unique(ExchID)],
StockName = dt[!is.na(StockName), unique(StockName)],
StockID = dt[!is.na(StockName), unique(StockID)]
)]
}
dt <- update_status(dt[! (volume == 0 & is.na(Volume))]) %>% as.data.table() %>%
.[, BFactor := round(LagClose / PreClose, ROUND_DIGITS)] %>%
.[1, BFactor := 1] %>%
.[is.na(BFactor), BFactor := 1] %>%
.[, newName := gsub('XR|XD|DR', '', StockName)] %>%
.[, xd := 'no'] %>%
.[grep('XR|XD|DR', StockName), xd := 'yes']
if (nrow(dt_jrj) != 0) {
res <- merge(dt[, .(TradingDay, newName, xd, Volume, BFactor, PreClose, LagClose)],
dt_jrj[, .(TradingDay, factor)],
by = 'TradingDay', all.x = T) %>%
.[is.na(factor), factor := 1] %>%
na2zero(., c('PreClose', 'LagClose'))
dt[, BFactor := update_factor(res)]
dt[is.na(BFactor), BFactor := 1]
}
cols <- c('PreClose', 'LagClose', 'newName', 'xd')
dt[, (cols) := NULL]
## -----------------------------------------
## 后复权是 cumprod
dt[, BFactor := round(cumprod(BFactor), ROUND_DIGITS)]
## -----------------------------------------
if (DEBUG & nrow(dt_jrj) != 0) {
cmp.jrj <- merge(dt, dt_jrj, by = 'TradingDay', all.x = TRUE) %>%
.[!is.na(factor) & !is.na(Volume.y)] %>%
.[, diff := BFactor.x / BFactor.y - 1]
if (nrow(cmp.jrj[abs(diff) > 0.05]) != 0) {
print("cmp.jrj")
print(cmp.jrj[abs(diff) > 0.05])
wind_code <- ifelse(substr(code, 1, 1) == '6', 'SH', 'SZ')
wind <- bar_from_wind[paste0(code, '.', wind_code)][TradingDay >= '2010-01-01']
wind[, bfactor := AdjFactor / wind[1, AdjFactor]]
wind[, TradingDay := ymd(TradingDay)]
cmp.wind <- merge(dt, wind, by = 'TradingDay', all = TRUE) %>%
.[, diff := (BFactor / bfactor - 1)] %>%
.[!is.na(bfactor)]
if (nrow(cmp.wind[abs(diff) > 0.05 & Volume.x != 0]) != 0) {
print("cmp.wind")
print(cmp.wind[abs(diff) > 0.05 & Volume.x != 0])
}
}
}
return(dt)
}
if (DEBUG) {
code <- '601318'
code <- '600087'
code <- '600055'
code <- '600057'
res <- gen_bfactor(code)
}
all_codes_info <- data_files_jq[!duplicated(symbol)]
system("sed -i '/^/d' ~/Desktop/log.txt",
ignore.stdout = TRUE,
ignore.stderr = TRUE)
system.time({
cl <- makeCluster(4, type = "FORK", outfile = '~/Desktop/log.txt')
dt <- parLapply(cl, all_codes_info[, symbol], function(symbol){
gen_bfactor(symbol)
}) %>% rbindlist()
stopCluster(cl)
# fst::write_fst(dt,  sprintf('%s/JoinQuant/Daily/res/daily.fst', setting$DATA_PATH))
})
# sink('~/Desktop/log.txt')
# dt <- list()
# for (code in all_codes_info[, symbol]) {
#     print(sprintf("%s @%s", code, Sys.time()))
#     dt[[code]] <- gen_bfactor(code)
# }
# sink()
if (DEBUG) {
mysqlSend(
db = 'china_stocks_bar',
query = 'truncate table daily',
host = '192.168.1.166'
)
mysqlWrite(
db = 'china_stocks_bar',
tbl = 'daily',
data = dt,
host = '192.168.1.166'
)
} else {
mysqlSend(
db = 'china_stocks_bar',
query = sprintf("delete from daily
where TradingDay >= %s"
, format(Sys.Date(), "%Y%m01")),
host = '192.168.1.166'
)
mysqlWrite(
db = 'china_stocks_bar',
tbl = 'daily',
data = dt[TradingDay >= format(Sys.Date(), "%Y-%m-01")],
host = '192.168.1.166'
)
}
dt
## monitor.R
## @Author: william
## @Date  : 2019-06-27 19:59:12
## @Last Modified by  : william
## @Last Modified time: 2019-06-27 19:59:39
## ---------------------------------------------
reticulate::use_python("~/anaconda2/bin/python")
## -----------------------------------------------------------------------------
ROOT_PATH <- '/home/william/Documents/myCTP/vnpy-1.9.0/'
hicloud <- reticulate::import_from_path('hicloud',sprintf("%s/hicloud", ROOT_PATH))
source(sprintf("%s/hicloud/mail.R", ROOT_PATH))
suppressMessages({
source('~/myData/R/Rconfig/myInit.R')
})
tday <- ymd(Sys.Date())
##------------------------------------------------------------------------------
logfile <- sprintf("~/myLog/%s_monitor_stocks.txt", tday)
sink(logfile)
cat("## ============================ ##\n")
cat("## 报：以下是今天的数据汇报。请过目！\n")
cat("##                                                                     \n")
cat(paste0("## 当前时间：", Sys.time()), "\n")
cat("## ============================ ##\n\n")
cat("## ============================ ##\n")
cat(paste0("## 当前交易日期：", tday), "\n")
print(tday)
cat("## ============================ ##\n\n")
##-- daily ---------------------------------------------------------------------
daily <- mysqlQuery(
db = 'china_stocks_bar',
query = sprintf("select *
from daily
where TradingDay >= %s
order by TradingDay, StockID",
getDay(-30)[1, gsub('-', '', days)]),
host = '192.168.1.166'
)
daily_today <- daily[TradingDay == tday, .(Records = nrow(.SD)),
by = c("TradingDay")]
daily_previous <- daily[TradingDay != tday, .(Records = nrow(.SD)),
by = c("TradingDay")]
if (nrow(daily_today) == 0 | daily_today[.N, Records] < daily_previous[, mean(Records)] * 0.95) {
cat('## 当前交易日的数据有缺失！！！\n')
cat('## 请重新运行 from_jq.py。\n')
print(daily)
} else {
cat('## 当前交易日的 daily 正确！！！\n')
}
cat("## ============================ ##\n\n")
##-- daily ---------------------------------------------------------------------
##-- minute --------------------------------------------------------------------
minute <- mysqlQuery(
db = 'china_stocks_bar',
query = sprintf("select *
from minute
where TradingDay = %s
order by TradingDay, StockID",
gsub('-', '', tday)),
host = '192.168.1.166'
)
dt_minute <- minute[order(StockID, Minute)] %>%
.[, .(
Open = .SD[1, Open],
High = .SD[, max(High)],
Low = .SD[, min(Low)],
Close = .SD[.N, Close],
Volume = .SD[, sum(Volume)],
Amount = .SD[, sum(Amount)]
), by = c('TradingDay', 'StockID')]
dt <- merge(daily[TradingDay == tday], dt_minute,
by = c('TradingDay', 'StockID'), all = TRUE)
res.not.in <- dt[(is.na(Open.x) | is.na(Open.y)) & Amount.x != 0] %>%
.[, category := 'not_in']
# if (nrow(res.not.in) != 0) {
#     print(res.not.in)
# }
res.not.equal <- dt[! (is.na(Open.x) | is.na(Open.y)) &
Amount.x != 0 &
(abs(Open.x/Open.y - 1) > 0.05 |
abs(High.x/High.y - 1) > 0.05 |
abs(Low.x/Low.y - 1) > 0.05 |
abs(Close.x/Close.y - 1) > 0.05 |
abs(Volume.x/Volume.y - 1) > 0.05 |
abs(Amount.x/Amount.y - 1) > 0.05)
] %>%
.[, category := 'not_equal']
# if (nrow(.not.equal) != 0) {
#     print(.not.equal)
# }
res <- list(res.not.in, res.not.equal) %>% rbindlist()
if (nrow(res) != 0) {
cat('## 当前交易日的 daily 与 minute 不一致！！！\n')
cat('## 请检查以下数据。\n')
res[, ":="(BFactor = NULL, UpperLimit = NULL,
LowerLimit = NULL, Status = NULL, IsLimit = NULL,
IfST = NULL)]
options(width = 180)
print(res)
print(res)
} else {
cat('## 当前交易日的数据正确！！！\n')
}
cat("## ============================ ##\n\n")
##-- minute --------------------------------------------------------------------
sink()
mail(receiver = c('fl@hicloud-investment.com',
'pc@hicloud-investment.com'),
subject = sprintf('Stocks: 数据监控 <INFO>'),
msg = readLines(logfile)
)
msg = readLines(logfile)
msg
reticulate::use_python("~/anaconda2/bin/python")
## -----------------------------------------------------------------------------
ROOT_PATH <- '/home/william/Documents/myCTP/vnpy-1.9.0/'
hicloud <- reticulate::import_from_path('hicloud',sprintf("%s/hicloud", ROOT_PATH))
source(sprintf("%s/hicloud/mail.R", ROOT_PATH))
suppressMessages({
source('~/myData/R/Rconfig/myInit.R')
})
tday <- ymd(Sys.Date())
logfile <- sprintf("~/myLog/%s_monitor_stocks.txt", tday)
sink(logfile)
cat("## ============================ ##\n")
cat("## 报：以下是今天的数据汇报。请过目！\n")
cat("##                                                                     \n")
cat(paste0("## 当前时间：", Sys.time()), "\n")
cat("## ============================ ##\n\n")
cat("## ============================ ##\n")
cat(paste0("## 当前交易日期：", tday), "\n")
print(tday)
cat("## ============================ ##\n\n")
##-- daily ---------------------------------------------------------------------
daily <- mysqlQuery(
db = 'china_stocks_bar',
query = sprintf("select *
from daily
where TradingDay >= %s
order by TradingDay, StockID",
getDay(-30)[1, gsub('-', '', days)]),
host = '192.168.1.166'
)
daily_today <- daily[TradingDay == tday, .(Records = nrow(.SD)),
by = c("TradingDay")]
daily_previous <- daily[TradingDay != tday, .(Records = nrow(.SD)),
by = c("TradingDay")]
if (nrow(daily_today) == 0 | daily_today[.N, Records] < daily_previous[, mean(Records)] * 0.95) {
cat('## 当前交易日的数据有缺失！！！\n')
cat('## 请重新运行 from_jq.py。\n')
print(daily)
} else {
cat('## 当前交易日的 daily 正确！！！\n')
}
cat("## ============================ ##\n\n")
##-- minute --------------------------------------------------------------------
minute <- mysqlQuery(
db = 'china_stocks_bar',
query = sprintf("select *
from minute
where TradingDay = %s
order by TradingDay, StockID",
gsub('-', '', tday)),
host = '192.168.1.166'
)
dt_minute <- minute[order(StockID, Minute)] %>%
.[, .(
Open = .SD[1, Open],
High = .SD[, max(High)],
Low = .SD[, min(Low)],
Close = .SD[.N, Close],
Volume = .SD[, sum(Volume)],
Amount = .SD[, sum(Amount)]
), by = c('TradingDay', 'StockID')]
dt <- merge(daily[TradingDay == tday], dt_minute,
by = c('TradingDay', 'StockID'), all = TRUE)
res.not.in <- dt[(is.na(Open.x) | is.na(Open.y)) & Amount.x != 0] %>%
.[, category := 'not_in']
res.not.equal <- dt[! (is.na(Open.x) | is.na(Open.y)) &
Amount.x != 0 &
(abs(Open.x/Open.y - 1) > 0.05 |
abs(High.x/High.y - 1) > 0.05 |
abs(Low.x/Low.y - 1) > 0.05 |
abs(Close.x/Close.y - 1) > 0.05 |
abs(Volume.x/Volume.y - 1) > 0.05 |
abs(Amount.x/Amount.y - 1) > 0.05)
] %>%
.[, category := 'not_equal']
res <- list(res.not.in, res.not.equal) %>% rbindlist()
if (nrow(res) != 0) {
cat('## 当前交易日的 daily 与 minute 不一致！！！\n')
cat('## 请检查以下数据。\n')
res[, ":="(BFactor = NULL, UpperLimit = NULL,
LowerLimit = NULL, Status = NULL, IsLimit = NULL,
IfST = NULL)]
options(width = 180)
print(res)
print(res)
} else {
cat('## 当前交易日的数据正确！！！\n')
}
cat("## ============================ ##\n\n")
##-- minute --------------------------------------------------------------------
sink()
msg = readLines(logfile)
msg
daily
minute
dt_minute
dt <- merge(daily[TradingDay == tday], dt_minute,
by = c('TradingDay', 'StockID'), all = TRUE)
res.not.in <- dt[(is.na(Open.x) | is.na(Open.y)) & Amount.x != 0] %>%
.[, category := 'not_in']
res.not.in
res.not.equal <- dt[! (is.na(Open.x) | is.na(Open.y)) &
Amount.x != 0 &
(abs(Open.x/Open.y - 1) > 0.05 |
abs(High.x/High.y - 1) > 0.05 |
abs(Low.x/Low.y - 1) > 0.05 |
abs(Close.x/Close.y - 1) > 0.05 |
abs(Volume.x/Volume.y - 1) > 0.05 |
abs(Amount.x/Amount.y - 1) > 0.05)
] %>%
.[, category := 'not_equal']
res.not.equal
res.not.equal <- dt[! (is.na(Open.x) | is.na(Open.y)) &
Amount.x != 0 &
(abs(Open.x/Open.y - 1) > 0.02 |
abs(High.x/High.y - 1) > 0.02 |
abs(Low.x/Low.y - 1) > 0.02 |
abs(Close.x/Close.y - 1) > 0.02 |
abs(Volume.x/Volume.y - 1) > 0.05 |
abs(Amount.x/Amount.y - 1) > 0.05)
] %>%
.[, category := 'not_equal']
res.not.equal
print(res.not.equal)
6.36 / 6.50 - 1
res.not.equal <- dt[! (is.na(Open.x) | is.na(Open.y)) &
Amount.x != 0 &
(abs(Open.x/Open.y - 1) > 0.03 |
abs(High.x/High.y - 1) > 0.03 |
abs(Low.x/Low.y - 1) > 0.03 |
abs(Close.x/Close.y - 1) > 0.03 |
abs(Volume.x/Volume.y - 1) > 0.05 |
abs(Amount.x/Amount.y - 1) > 0.05)
] %>%
.[, category := 'not_equal']
6.36 / 6.50 - 1
print(res.not.equal)
print(res.not.equal)
source('~/myData/R/ChinaStocks/monitor.R')
source('~/myData/R/ChinaStocks/monitor.R')
source('~/myData/R/ChinaStocks/monitor.R')
mail(receiver = c('fl@hicloud-investment.com'
,'pc@hicloud-investment.com'
),
subject = sprintf('Stocks: 数据监控 <INFO>'),
msg = readLines(logfile)
)
reticulate::use_python("~/anaconda2/bin/python")
## -----------------------------------------------------------------------------
ROOT_PATH <- '/home/william/Documents/myCTP/vnpy-1.9.0/'
hicloud <- reticulate::import_from_path('hicloud',sprintf("%s/hicloud", ROOT_PATH))
source(sprintf("%s/hicloud/mail.R", ROOT_PATH))
suppressMessages({
source('~/myData/R/Rconfig/myInit.R')
})
tday <- ymd(Sys.Date())
logfile <- sprintf("~/myLog/%s_monitor_stocks.txt", tday)
sink(logfile)
cat("## ============================ ##\n")
cat("## 报：以下是今天的数据汇报。请过目！\n")
cat("##                                                                     \n")
cat(paste0("## 当前时间：", Sys.time()), "\n")
cat("## ============================ ##\n\n")
cat("## ============================ ##\n")
cat(paste0("## 当前交易日期：", tday), "\n")
print(tday)
cat("## ============================ ##\n\n")
##-- daily ---------------------------------------------------------------------
daily <- mysqlQuery(
db = 'china_stocks_bar',
query = sprintf("select *
from daily
where TradingDay >= %s
order by TradingDay, StockID",
getDay(-30)[1, gsub('-', '', days)]),
host = '192.168.1.166'
)
daily_today <- daily[TradingDay == tday, .(Records = nrow(.SD)),
by = c("TradingDay")]
daily_previous <- daily[TradingDay != tday, .(Records = nrow(.SD)),
by = c("TradingDay")]
if (nrow(daily_today) == 0 | daily_today[.N, Records] < daily_previous[, mean(Records)] * 0.95) {
cat('## 当前交易日的数据有缺失！！！\n')
cat('## 请重新运行 from_jq.py。\n')
print(daily)
} else {
cat('## 当前交易日的 daily 正确！！！\n')
}
cat("## ============================ ##\n\n")
##-- minute --------------------------------------------------------------------
minute <- mysqlQuery(
db = 'china_stocks_bar',
query = sprintf("select *
from minute
where TradingDay = %s
order by TradingDay, StockID",
gsub('-', '', tday)),
host = '192.168.1.166'
)
dt_minute <- minute[order(StockID, Minute)] %>%
.[, .(
Open = .SD[1, Open],
High = .SD[, max(High)],
Low = .SD[, min(Low)],
Close = .SD[.N, Close],
Volume = .SD[, sum(Volume)],
Amount = .SD[, sum(Amount)]
), by = c('TradingDay', 'StockID')]
dt <- merge(daily[TradingDay == tday], dt_minute,
by = c('TradingDay', 'StockID'), all = TRUE)
res.not.in <- dt[(is.na(Open.x) | is.na(Open.y)) & Amount.x != 0] %>%
.[, category := 'not_in']
res.not.equal <- dt[! (is.na(Open.x) | is.na(Open.y)) &
Amount.x != 0 &
(abs(Open.x/Open.y - 1) > 0.03 |
abs(High.x/High.y - 1) > 0.03 |
abs(Low.x/Low.y - 1) > 0.03 |
abs(Close.x/Close.y - 1) > 0.03 |
abs(Volume.x/Volume.y - 1) > 0.05 |
abs(Amount.x/Amount.y - 1) > 0.05)
] %>%
.[, category := 'not_equal']
res <- list(res.not.in, res.not.equal) %>% rbindlist()
if (nrow(res) != 0) {
cat('## 当前交易日的 daily 与 minute 不一致！！！\n')
cat('## 请检查以下数据。\n')
res[, ":="(BFactor = NULL, UpperLimit = NULL,
LowerLimit = NULL, Status = NULL, IsLimit = NULL,
IfST = NULL)]
options(width = 180)
print(res)
print(res)
} else {
cat('## 当前交易日的数据正确！！！\n')
}
cat("## ============================ ##\n\n")
##-- minute --------------------------------------------------------------------
sink()
if (FALSE) {
mail(receiver = c('fl@hicloud-investment.com'
,'pc@hicloud-investment.com'
),
subject = sprintf('Stocks: 数据监控 <INFO>'),
msg = readLines(logfile)
)
}
msg = readLines(logfile)
msg
mail(receiver = c('fl@hicloud-investment.com'
,'pc@hicloud-investment.com'
),
subject = sprintf('Stocks: 数据监控 <INFO>'),
msg = readLines(logfile)
)
mail(receiver = c('fl@hicloud-investment.com'
,'pc@hicloud-investment.com'
),
subject = sprintf('Stocks: 数据 <INFO>'),
msg = readLines(logfile)
)
library(rmarkdown)
rmarkdown::render(
input = "/home/william/Documents/HicloudReport/Rmd_Excel/ReportingTemplate.Rmd",
output_file = "/home/william/Documents/HicloudReport/汉云CTA周报.pdf"
)
rmarkdown::render(
input = "/home/william/Documents/HicloudReport/Rmd_Excel/ReportingTemplate.Rmd",
output_file = "/home/william/Documents/HicloudReport/汉云CTA周报.pdf"
)
rmarkdown::render(
input = "/home/william/Documents/HicloudReport/Rmd_Excel/ReportingTemplate.Rmd",
output_file = "/home/william/Documents/HicloudReport/汉云CTA周报.pdf"
)
rmarkdown::render(
input = "/home/william/Documents/HicloudReport/Rmd_Excel/ReportingTemplate.Rmd",
output_file = "/home/william/Documents/HicloudReport/汉云CTA周报.pdf"
)
library(devtools)
rmarkdown::render(
input = "/home/william/Documents/HicloudReport/Rmd_Excel/ReportingTemplate.Rmd",
output_file = "/home/william/Documents/HicloudReport/汉云CTA周报.pdf"
)
rmarkdown::render(
input = "/home/william/Documents/HicloudReport/Rmd_Excel/ReportingTemplate.Rmd",
output_file = "/home/william/Documents/HicloudReport/汉云CTA周报.pdf"
)
rmarkdown::render(
input = "/home/william/Documents/HicloudReport/Rmd_Excel/ReportingTemplate.Rmd",
output_file = "/home/william/Documents/HicloudReport/汉云CTA周报.pdf"
)
setwd("~/mydeck/")
library(slidify)
slidify('index.Rmd')
